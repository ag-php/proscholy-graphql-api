type User {
    id: ID!
    name: String
}

type Author {
    id: ID!
    name: String!
    description: String
    type: Int
    type_string: String
    type_string_values: [String]
    email: String
    url: String
    visits: Int
    public_url: String
    song_lyrics: [SongLyric] @belongsToMany
    externals: [External] @belongsToMany
    files: [File] @belongsToMany
    members: [Author] @belongsToMany
    memberships: [Author] @belongsToMany
}

type Song {
    id: ID!
    name: String
    song_lyrics(type: Int @eq): [SongLyric] @hasMany
}

type SongLyric {
    id: ID!
    name: String
    public_url: String
    lyrics_no_chords: String
    lyrics: String
    type: Int!
    is_original: Boolean! @deprecated(reason: "Use the `type` field instead")
    is_authorized: Boolean! @deprecated(reason: "Use the `type` field instead")
    is_approved_by_author: Boolean!
    is_published: Boolean!
    has_anonymous_author: Boolean!
    lang: String
    lang_string: String
    lang_string_values: JSON
    updated_at: String
    authors: [Author] @belongsToMany
    externals(
        id: Int @eq,
        type: Int @eq
        orderBy: [OrderByClause!] @orderBy
        ): [External] @hasMany
    files(id: Int @eq, type: Int @eq): [File] @hasMany
    tags(type: Int @eq): [Tag] @belongsToMany
    songbook_records: [SongbookRecord] @belongsToMany
    song: Song! @belongsTo
    has_chords: Boolean!
    siblings: [SongLyric] @with(relation: "song") @method(name: "getSiblings")
    trashed: Boolean @method(name: "trashed")
    only_regenschori: Boolean
    capo: Int
    visits: Int
    has_lyrics: Boolean
    liturgy_approval_status: Int
    liturgy_approval_status_string_values: JSON
    # has_sheet_music: Boolean @with(relation: "externals")
    # has_media: Boolean @with(relation: "files")
}

type External {
    id: ID!
    public_name: String
    type: Int
    type_string: String
    type_string_values: [String]
    authors: [Author] @belongsToMany
    song_lyric: SongLyric @belongsTo
    url: String
    media_id: String
}

type File {
    id: ID!
    public_name: String
    url: String
    download_url: String
    type: Int
    type_string: String
    type_string_values: [String]
    authors: [Author] @belongsToMany
    song_lyric: SongLyric @belongsTo
    thumbnail_url: String
    description: String
    name: String
    filename: String
    external_type: Int
}

type Tag {
    id: ID!
    name: String
    type: Int
    parent_tag: Tag @belongsTo
    child_tags: [Tag] @hasMany
    description: String
}

type Model {
    id: ID!
    class_name: String!
    edit_url: String
}

type Songbook {
    id: ID!
    name: String!
    shortcut: String """ todo: max length 6 """
    records: [SongbookRecord] @belongsToMany
    songs_count: Int
    is_private: Boolean
    color: String
}

type SongbookRecord {
    id: ID! @field(resolver: "App\\GraphQL\\Types\\SongbookRecordType@id")
    number: String @field(resolver: "App\\GraphQL\\Types\\SongbookRecordType@number")
    placeholder: String @field(resolver: "App\\GraphQL\\Types\\SongbookRecordType@placeholder")
    song_lyric: SongLyric @field(resolver: "App\\GraphQL\\Types\\SongbookRecordType@song_lyric")
    songbook: Songbook @field(resolver: "App\\GraphQL\\Types\\SongbookRecordType@songbook")
}

type SongLyricPaginator {
    data: [SongLyric!]! @field(resolver: "Nuwave\\Lighthouse\\Pagination\\PaginatorField@dataResolver")
    paginatorInfo: PaginatorInfo! @field(resolver: "Nuwave\\Lighthouse\\Pagination\\PaginatorField@paginatorInfoResolver")
}